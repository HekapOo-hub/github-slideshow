// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Bet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BetServiceClient is the client API for BetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BetServiceClient interface {
	MakeBet(ctx context.Context, in *BetWithToken, opts ...grpc.CallOption) (*Response, error)
	RemoveBet(ctx context.Context, in *IdWithToken, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	GetMyBets(ctx context.Context, in *IdWithToken, opts ...grpc.CallOption) (*Response, error)
}

type betServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBetServiceClient(cc grpc.ClientConnInterface) BetServiceClient {
	return &betServiceClient{cc}
}

func (c *betServiceClient) MakeBet(ctx context.Context, in *BetWithToken, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bet.BetService/MakeBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) RemoveBet(ctx context.Context, in *IdWithToken, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bet.BetService/RemoveBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bet.BetService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) GetMyBets(ctx context.Context, in *IdWithToken, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bet.BetService/GetMyBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetServiceServer is the server API for BetService service.
// All implementations must embed UnimplementedBetServiceServer
// for forward compatibility
type BetServiceServer interface {
	MakeBet(context.Context, *BetWithToken) (*Response, error)
	RemoveBet(context.Context, *IdWithToken) (*Response, error)
	GetAll(context.Context, *Empty) (*Response, error)
	GetMyBets(context.Context, *IdWithToken) (*Response, error)
	mustEmbedUnimplementedBetServiceServer()
}

// UnimplementedBetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBetServiceServer struct {
}

func (UnimplementedBetServiceServer) MakeBet(context.Context, *BetWithToken) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBet not implemented")
}
func (UnimplementedBetServiceServer) RemoveBet(context.Context, *IdWithToken) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBet not implemented")
}
func (UnimplementedBetServiceServer) GetAll(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBetServiceServer) GetMyBets(context.Context, *IdWithToken) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyBets not implemented")
}
func (UnimplementedBetServiceServer) mustEmbedUnimplementedBetServiceServer() {}

// UnsafeBetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BetServiceServer will
// result in compilation errors.
type UnsafeBetServiceServer interface {
	mustEmbedUnimplementedBetServiceServer()
}

func RegisterBetServiceServer(s grpc.ServiceRegistrar, srv BetServiceServer) {
	s.RegisterService(&BetService_ServiceDesc, srv)
}

func _BetService_MakeBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetWithToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).MakeBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bet.BetService/MakeBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).MakeBet(ctx, req.(*BetWithToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_RemoveBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdWithToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).RemoveBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bet.BetService/RemoveBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).RemoveBet(ctx, req.(*IdWithToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bet.BetService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_GetMyBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdWithToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).GetMyBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bet.BetService/GetMyBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).GetMyBets(ctx, req.(*IdWithToken))
	}
	return interceptor(ctx, in, info, handler)
}

// BetService_ServiceDesc is the grpc.ServiceDesc for BetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.bet.BetService",
	HandlerType: (*BetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeBet",
			Handler:    _BetService_MakeBet_Handler,
		},
		{
			MethodName: "RemoveBet",
			Handler:    _BetService_RemoveBet_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BetService_GetAll_Handler,
		},
		{
			MethodName: "GetMyBets",
			Handler:    _BetService_GetMyBets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bet.proto",
}
